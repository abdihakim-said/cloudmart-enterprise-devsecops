name: CloudMart DevSecOps Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'  # Daily security scan at 2 AM

env:
  AWS_REGION: us-east-1
  EKS_CLUSTER_NAME: cloudmart-cluster
  REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  # ============================================================================
  # STATIC APPLICATION SECURITY TESTING (SAST)
  # ============================================================================
  sast-analysis:
    name: üîç SAST Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Semgrep SAST Scanning
      - name: Run Semgrep SAST
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
            p/javascript
            p/typescript
            p/react
            p/nodejs
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # CodeQL Analysis
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: javascript

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2

      # ESLint Security Plugin
      - name: Install dependencies
        run: |
          cd frontend && npm ci
          cd ../backend && npm ci

      - name: Run ESLint Security
        run: |
          cd frontend && npx eslint . --ext .js,.jsx,.ts,.tsx --format sarif --output-file eslint-results.sarif || true
          cd ../backend && npx eslint . --ext .js,.ts --format sarif --output-file eslint-results.sarif || true

      # SonarCloud Security Analysis
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # Snyk Code Analysis
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=frontend/package.json

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # ============================================================================
  # DEPENDENCY VULNERABILITY SCANNING
  # ============================================================================
  dependency-scan:
    name: üì¶ Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # NPM Audit
      - name: NPM Security Audit - Frontend
        run: |
          cd frontend
          npm audit --audit-level=moderate --json > npm-audit-frontend.json || true
          npm audit --audit-level=moderate

      - name: NPM Security Audit - Backend
        run: |
          cd backend
          npm audit --audit-level=moderate --json > npm-audit-backend.json || true
          npm audit --audit-level=moderate

      # Retire.js for JavaScript vulnerabilities
      - name: Install Retire.js
        run: npm install -g retire

      - name: Run Retire.js scan
        run: |
          retire --path frontend/ --outputformat json --outputpath retire-frontend.json || true
          retire --path backend/ --outputformat json --outputpath retire-backend.json || true

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'CloudMart'
          path: '.'
          format: 'ALL'
          args: >
            --enableRetired
            --enableExperimental
            --failOnCVSS 7

      - name: Upload OWASP Dependency Check results
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-report
          path: reports/

  # ============================================================================
  # SECRETS SCANNING
  # ============================================================================
  secrets-scan:
    name: üîê Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # GitLeaks for secrets detection
      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      # TruffleHog for additional secrets detection
      - name: TruffleHog OSS
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

  # ============================================================================
  # INFRASTRUCTURE AS CODE SECURITY
  # ============================================================================
  iac-security:
    name: üèóÔ∏è Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Checkov for Terraform security
      - name: Run Checkov
        id: checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          download_external_modules: true
          quiet: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif

      # TFSec for Terraform security
      - name: Run tfsec
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif

      - name: Upload tfsec results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: tfsec.sarif

      # Terrascan for policy violations
      - name: Run Terrascan
        id: terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: 'terraform'
          iac_version: 'v14'
          policy_type: 'aws'
          only_warn: true
          sarif_upload: true

  # ============================================================================
  # CONTAINER IMAGE SECURITY SCANNING
  # ============================================================================
  container-security:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Frontend Image
        run: |
          cd frontend
          docker build -t cloudmart-frontend:${{ github.sha }} .

      - name: Build Backend Image
        run: |
          cd backend
          docker build -t cloudmart-backend:${{ github.sha }} .

      # Trivy Container Scanning
      - name: Run Trivy vulnerability scanner - Frontend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cloudmart-frontend:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-frontend-results.sarif'

      - name: Run Trivy vulnerability scanner - Backend
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'cloudmart-backend:${{ github.sha }}'
          format: 'sarif'
          output: 'trivy-backend-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-frontend-results.sarif'

      - name: Upload Trivy scan results - Backend
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-backend-results.sarif'

      # Snyk Container Scanning
      - name: Run Snyk to check Docker image for vulnerabilities
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: cloudmart-frontend:${{ github.sha }}
          args: --severity-threshold=high

      # Docker Bench Security
      - name: Run Docker Bench Security
        run: |
          git clone https://github.com/docker/docker-bench-security.git
          cd docker-bench-security
          sudo sh docker-bench-security.sh

  # ============================================================================
  # BUILD AND PUSH SECURE IMAGES
  # ============================================================================
  build-secure-images:
    name: üî® Build & Push Secure Images
    runs-on: ubuntu-latest
    needs: [container-security, iac-security]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push frontend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cloudmart-frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd frontend
          
          # Build with security best practices
          docker build \
            --no-cache \
            --pull \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ github.ref_name }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          # Final security scan before push
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Build, tag, and push backend image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: cloudmart-backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd backend
          
          docker build \
            --no-cache \
            --pull \
            --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') \
            --build-arg VCS_REF=${{ github.sha }} \
            --build-arg VERSION=${{ github.ref_name }} \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image --exit-code 1 --severity HIGH,CRITICAL \
            $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Sign container images with Cosign
        run: |
          # Install Cosign
          curl -O -L "https://github.com/sigstore/cosign/releases/latest/download/cosign-linux-amd64"
          sudo mv cosign-linux-amd64 /usr/local/bin/cosign
          sudo chmod +x /usr/local/bin/cosign
          
          # Sign images
          echo "${{ secrets.COSIGN_PRIVATE_KEY }}" > cosign.key
          cosign sign --key cosign.key ${{ env.REGISTRY }}/cloudmart-frontend:${{ github.sha }}
          cosign sign --key cosign.key ${{ env.REGISTRY }}/cloudmart-backend:${{ github.sha }}

  # ============================================================================
  # KUBERNETES SECURITY SCANNING
  # ============================================================================
  k8s-security:
    name: ‚ò∏Ô∏è Kubernetes Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Kubesec for K8s manifest security
      - name: Run Kubesec scan
        run: |
          curl -sSX POST --data-binary @k8s/app/frontend-deployment.yaml \
            https://v2.kubesec.io/scan > kubesec-frontend-results.json
          curl -sSX POST --data-binary @k8s/app/backend-deployment.yaml \
            https://v2.kubesec.io/scan > kubesec-backend-results.json

      # Polaris for K8s best practices
      - name: Run Polaris
        run: |
          curl -L https://github.com/FairwindsOps/polaris/releases/latest/download/polaris_linux_amd64.tar.gz \
            | tar xz
          ./polaris audit --audit-path k8s/ --format json > polaris-results.json

      # Falco rules validation
      - name: Validate Falco rules
        run: |
          docker run --rm -v $(pwd):/workspace falcosecurity/falco:latest \
            falco --validate /workspace/security/falco-rules.yaml || true

  # ============================================================================
  # DYNAMIC APPLICATION SECURITY TESTING (DAST)
  # ============================================================================
  dast-testing:
    name: üåê DAST Security Testing
    runs-on: ubuntu-latest
    needs: [build-secure-images]
    if: github.ref == 'refs/heads/main'
    services:
      # Start application for DAST testing
      frontend:
        image: node:20
        ports:
          - 3000:3000
      backend:
        image: node:20
        ports:
          - 5000:5000
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup application for testing
        run: |
          # Start frontend
          cd frontend
          npm ci
          npm run build
          npx serve -s build -l 3000 &
          
          # Start backend
          cd ../backend
          npm ci
          npm start &
          
          # Wait for services to be ready
          sleep 30

      # OWASP ZAP DAST Scanning
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: OWASP ZAP API Scan
        uses: zaproxy/action-api-scan@v0.6.0
        with:
          target: 'http://localhost:5000'
          format: openapi
          api_spec: 'docs/api-spec.yaml'

      # Nuclei for additional DAST
      - name: Run Nuclei Scanner
        uses: projectdiscovery/nuclei-action@main
        with:
          target: 'http://localhost:3000'
          github-report: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

      # Custom security tests
      - name: Run Custom Security Tests
        run: |
          # Install security testing tools
          npm install -g newman
          
          # Run Postman security collection
          newman run security/postman-security-tests.json \
            --environment security/test-environment.json \
            --reporters cli,json --reporter-json-export newman-results.json

  # ============================================================================
  # SECURITY COMPLIANCE CHECKS
  # ============================================================================
  compliance-check:
    name: üìã Security Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # CIS Benchmarks
      - name: Run CIS Docker Benchmark
        run: |
          git clone https://github.com/dev-sec/cis-docker-benchmark.git
          cd cis-docker-benchmark
          # Run CIS Docker benchmark tests

      # NIST Compliance Check
      - name: NIST Cybersecurity Framework Check
        run: |
          echo "Running NIST CSF compliance checks..."
          # Custom compliance validation script
          ./security/scripts/nist-compliance-check.sh

      # SOC 2 Controls Validation
      - name: SOC 2 Controls Check
        run: |
          echo "Validating SOC 2 Type II controls..."
          ./security/scripts/soc2-controls-check.sh

  # ============================================================================
  # SECURITY REPORT GENERATION
  # ============================================================================
  security-report:
    name: üìä Generate Security Report
    runs-on: ubuntu-latest
    needs: [sast-analysis, dependency-scan, container-security, dast-testing, compliance-check]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate Security Dashboard
        run: |
          python3 security/scripts/generate-security-report.py \
            --output security-dashboard.html \
            --format html,json,pdf

      - name: Upload Security Report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: |
            security-dashboard.html
            security-report.json
            security-report.pdf

      - name: Comment Security Summary on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = JSON.parse(fs.readFileSync('security-report.json', 'utf8'));
            
            const comment = `## üîí Security Scan Results
            
            | Check | Status | Critical | High | Medium | Low |
            |-------|--------|----------|------|--------|-----|
            | SAST | ${report.sast.status} | ${report.sast.critical} | ${report.sast.high} | ${report.sast.medium} | ${report.sast.low} |
            | Dependencies | ${report.deps.status} | ${report.deps.critical} | ${report.deps.high} | ${report.deps.medium} | ${report.deps.low} |
            | Containers | ${report.containers.status} | ${report.containers.critical} | ${report.containers.high} | ${report.containers.medium} | ${report.containers.low} |
            | DAST | ${report.dast.status} | ${report.dast.critical} | ${report.dast.high} | ${report.dast.medium} | ${report.dast.low} |
            
            **Overall Security Score**: ${report.overall_score}/100
            
            ${report.overall_score >= 80 ? '‚úÖ Security checks passed!' : '‚ùå Security issues found - review required'}
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================================================
  # SECURE DEPLOYMENT
  # ============================================================================
  secure-deploy:
    name: üöÄ Secure Deployment
    runs-on: ubuntu-latest
    needs: [security-report]
    if: github.ref == 'refs/heads/main' && needs.security-report.result == 'success'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Update kubeconfig
        run: |
          aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER_NAME }}

      - name: Deploy with security policies
        run: |
          # Apply network policies
          kubectl apply -f security/k8s/network-policies.yaml
          
          # Apply pod security policies
          kubectl apply -f security/k8s/pod-security-policies.yaml
          
          # Deploy with security context
          envsubst < k8s/app/frontend-deployment.yaml | kubectl apply -f -
          envsubst < k8s/app/backend-deployment.yaml | kubectl apply -f -
          
          # Verify deployment security
          kubectl get pods -o jsonpath='{.items[*].spec.securityContext}'

      - name: Run runtime security monitoring
        run: |
          # Deploy Falco for runtime security
          kubectl apply -f security/k8s/falco-deployment.yaml
          
          # Verify security monitoring is active
          kubectl get pods -n falco-system

      - name: Post-deployment security validation
        run: |
          # Run security validation tests
          ./security/scripts/post-deployment-security-check.sh
          
          # Verify no privileged containers
          kubectl get pods --all-namespaces -o jsonpath='{.items[?(@.spec.securityContext.privileged==true)].metadata.name}' | wc -w
